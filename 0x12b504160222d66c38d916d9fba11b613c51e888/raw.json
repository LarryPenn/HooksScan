{
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/hooks/FewETHHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {WETH} from \\\"solmate/src/tokens/WETH.sol\\\";\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {IPoolManager} from \\\"@uniswap/v4-core/src/interfaces/IPoolManager.sol\\\";\\nimport {Currency, CurrencyLibrary} from \\\"@uniswap/v4-core/src/types/Currency.sol\\\";\\nimport {BaseTokenWrapperHook} from \\\"../base/hooks/BaseTokenWrapperHook.sol\\\";\\nimport {IFewWrappedToken} from \\\"../interfaces/external/IFewWrappedToken.sol\\\";\\n\\n/// @title Wrapped Few ETH Hook\\n/// @notice Hook for wrapping/unwrapping fwWETH in Uniswap V4 pools\\n/// @dev Implements 1:1 wrapping/unwrapping between ETH and fwWETH\\ncontract FewETHHook is BaseTokenWrapperHook {\\n    /// @notice The WETH9 contract\\n    WETH public immutable weth;\\n    /// @notice The fwWETH contract used for wrapping/unwrapping operations\\n    IFewWrappedToken public immutable fwWETH;\\n\\n    /// @notice Creates a new fwWETH wrapper hook\\n    /// @param _manager The Uniswap V4 pool manager\\n    /// @param _weth The WETH9 contract address\\n    /// @param _fwWETH The fwWETH contract address\\n    /// @dev Initializes with fwWETH as wrapper token and ETH as underlying token\\n    constructor(IPoolManager _manager, address payable _weth, IFewWrappedToken _fwWETH)\\n        BaseTokenWrapperHook(\\n            _manager,\\n            Currency.wrap(address(_fwWETH)), // wrapper token is fwWETH\\n            CurrencyLibrary.ADDRESS_ZERO // underlying token is ETH (address(0))\\n        )\\n    {\\n        weth = WETH(payable(_weth));\\n        fwWETH = _fwWETH;\\n        ERC20(weth).approve(address(fwWETH), type(uint256).max);\\n    }\\n\\n    /// @inheritdoc BaseTokenWrapperHook\\n    /// @notice Wraps ETH to fwWETH\\n    /// @param underlyingAmount Amount of ETH to wrap\\n    /// @return Amount of fwWETH received\\n    function _deposit(uint256 underlyingAmount) internal override returns (uint256) {\\n        weth.deposit{value: underlyingAmount}();\\n        return fwWETH.wrap(underlyingAmount);\\n    }\\n\\n    /// @inheritdoc BaseTokenWrapperHook\\n    /// @notice Unwraps fwWETH to ETH\\n    /// @param wrapperAmount Amount of fwWETH to unwrap\\n    /// @return Amount of ETH received\\n    function _withdraw(uint256 wrapperAmount) internal override returns (uint256) {\\n        fwWETH.unwrap(wrapperAmount);\\n        weth.withdraw(wrapperAmount);\\n        return wrapperAmount;\\n    }\\n\\n    /// @notice Required to receive ETH\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/lib/solmate/src/tokens/WETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\n\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\n\\n/// @notice Minimalist and modern Wrapped Ether implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/WETH.sol)\\n/// @author Inspired by WETH9 (https://github.com/dapphub/ds-weth/blob/master/src/weth9.sol)\\ncontract WETH is ERC20(\\\"Wrapped Ether\\\", \\\"WETH\\\", 18) {\\n    using SafeTransferLib for address;\\n\\n    event Deposit(address indexed from, uint256 amount);\\n\\n    event Withdrawal(address indexed to, uint256 amount);\\n\\n    function deposit() public payable virtual {\\n        _mint(msg.sender, msg.value);\\n\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual {\\n        _burn(msg.sender, amount);\\n\\n        emit Withdrawal(msg.sender, amount);\\n\\n        msg.sender.safeTransferETH(amount);\\n    }\\n\\n    receive() external payable virtual {\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/interfaces/IPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Currency} from \\\"../types/Currency.sol\\\";\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\nimport {IERC6909Claims} from \\\"./external/IERC6909Claims.sol\\\";\\nimport {IProtocolFees} from \\\"./IProtocolFees.sol\\\";\\nimport {BalanceDelta} from \\\"../types/BalanceDelta.sol\\\";\\nimport {PoolId} from \\\"../types/PoolId.sol\\\";\\nimport {IExtsload} from \\\"./IExtsload.sol\\\";\\nimport {IExttload} from \\\"./IExttload.sol\\\";\\n\\n/// @notice Interface for the PoolManager\\ninterface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload, IExttload {\\n    /// @notice Thrown when a currency is not netted out after the contract is unlocked\\n    error CurrencyNotSettled();\\n\\n    /// @notice Thrown when trying to interact with a non-initialized pool\\n    error PoolNotInitialized();\\n\\n    /// @notice Thrown when unlock is called, but the contract is already unlocked\\n    error AlreadyUnlocked();\\n\\n    /// @notice Thrown when a function is called that requires the contract to be unlocked, but it is not\\n    error ManagerLocked();\\n\\n    /// @notice Pools are limited to type(int16).max tickSpacing in #initialize, to prevent overflow\\n    error TickSpacingTooLarge(int24 tickSpacing);\\n\\n    /// @notice Pools must have a positive non-zero tickSpacing passed to #initialize\\n    error TickSpacingTooSmall(int24 tickSpacing);\\n\\n    /// @notice PoolKey must have currencies where address(currency0) < address(currency1)\\n    error CurrenciesOutOfOrderOrEqual(address currency0, address currency1);\\n\\n    /// @notice Thrown when a call to updateDynamicLPFee is made by an address that is not the hook,\\n    /// or on a pool that does not have a dynamic swap fee.\\n    error UnauthorizedDynamicLPFeeUpdate();\\n\\n    /// @notice Thrown when trying to swap amount of 0\\n    error SwapAmountCannotBeZero();\\n\\n    ///@notice Thrown when native currency is passed to a non native settlement\\n    error NonzeroNativeValue();\\n\\n    /// @notice Thrown when `clear` is called with an amount that is not exactly equal to the open currency delta.\\n    error MustClearExactPositiveDelta();\\n\\n    /// @notice Emitted when a new pool is initialized\\n    /// @param id The abi encoded hash of the pool key struct for the new pool\\n    /// @param currency0 The first currency of the pool by address sort order\\n    /// @param currency1 The second currency of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param hooks The hooks contract address for the pool, or address(0) if none\\n    /// @param sqrtPriceX96 The price of the pool on initialization\\n    /// @param tick The initial tick of the pool corresponding to the initialized price\\n    event Initialize(\\n        PoolId indexed id,\\n        Currency indexed currency0,\\n        Currency indexed currency1,\\n        uint24 fee,\\n        int24 tickSpacing,\\n        IHooks hooks,\\n        uint160 sqrtPriceX96,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted when a liquidity position is modified\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was modified\\n    /// @param sender The address that modified the pool\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param liquidityDelta The amount of liquidity that was added or removed\\n    /// @param salt The extra data to make positions unique\\n    event ModifyLiquidity(\\n        PoolId indexed id, address indexed sender, int24 tickLower, int24 tickUpper, int256 liquidityDelta, bytes32 salt\\n    );\\n\\n    /// @notice Emitted for swaps between currency0 and currency1\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was modified\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param amount0 The delta of the currency0 balance of the pool\\n    /// @param amount1 The delta of the currency1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of the price of the pool after the swap\\n    /// @param fee The swap fee in hundredths of a bip\\n    event Swap(\\n        PoolId indexed id,\\n        address indexed sender,\\n        int128 amount0,\\n        int128 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick,\\n        uint24 fee\\n    );\\n\\n    /// @notice Emitted for donations\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was donated to\\n    /// @param sender The address that initiated the donate call\\n    /// @param amount0 The amount donated in currency0\\n    /// @param amount1 The amount donated in currency1\\n    event Donate(PoolId indexed id, address indexed sender, uint256 amount0, uint256 amount1);\\n\\n    /// @notice All interactions on the contract that account deltas require unlocking. A caller that calls `unlock` must implement\\n    /// `IUnlockCallback(msg.sender).unlockCallback(data)`, where they interact with the remaining functions on this contract.\\n    /// @dev The only functions callable without an unlocking are `initialize` and `updateDynamicLPFee`\\n    /// @param data Any data to pass to the callback, via `IUnlockCallback(msg.sender).unlockCallback(data)`\\n    /// @return The data returned by the call to `IUnlockCallback(msg.sender).unlockCallback(data)`\\n    function unlock(bytes calldata data) external returns (bytes memory);\\n\\n    /// @notice Initialize the state for a given pool ID\\n    /// @dev A swap fee totaling MAX_SWAP_FEE (100%) makes exact output swaps impossible since the input is entirely consumed by the fee\\n    /// @param key The pool key for the pool to initialize\\n    /// @param sqrtPriceX96 The initial square root price\\n    /// @return tick The initial tick of the pool\\n    function initialize(PoolKey memory key, uint160 sqrtPriceX96) external returns (int24 tick);\\n\\n    struct ModifyLiquidityParams {\\n        // the lower and upper tick of the position\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // how to modify the liquidity\\n        int256 liquidityDelta;\\n        // a value to set if you want unique liquidity positions at the same range\\n        bytes32 salt;\\n    }\\n\\n    /// @notice Modify the liquidity for the given pool\\n    /// @dev Poke by calling with a zero liquidityDelta\\n    /// @param key The pool to modify liquidity in\\n    /// @param params The parameters for modifying the liquidity\\n    /// @param hookData The data to pass through to the add/removeLiquidity hooks\\n    /// @return callerDelta The balance delta of the caller of modifyLiquidity. This is the total of both principal, fee deltas, and hook deltas if applicable\\n    /// @return feesAccrued The balance delta of the fees generated in the liquidity range. Returned for informational purposes\\n    function modifyLiquidity(PoolKey memory key, ModifyLiquidityParams memory params, bytes calldata hookData)\\n        external\\n        returns (BalanceDelta callerDelta, BalanceDelta feesAccrued);\\n\\n    struct SwapParams {\\n        /// Whether to swap token0 for token1 or vice versa\\n        bool zeroForOne;\\n        /// The desired input amount if negative (exactIn), or the desired output amount if positive (exactOut)\\n        int256 amountSpecified;\\n        /// The sqrt price at which, if reached, the swap will stop executing\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swap against the given pool\\n    /// @param key The pool to swap in\\n    /// @param params The parameters for swapping\\n    /// @param hookData The data to pass through to the swap hooks\\n    /// @return swapDelta The balance delta of the address swapping\\n    /// @dev Swapping on low liquidity pools may cause unexpected swap amounts when liquidity available is less than amountSpecified.\\n    /// Additionally note that if interacting with hooks that have the BEFORE_SWAP_RETURNS_DELTA_FLAG or AFTER_SWAP_RETURNS_DELTA_FLAG\\n    /// the hook may alter the swap input/output. Integrators should perform checks on the returned swapDelta.\\n    function swap(PoolKey memory key, SwapParams memory params, bytes calldata hookData)\\n        external\\n        returns (BalanceDelta swapDelta);\\n\\n    /// @notice Donate the given currency amounts to the in-range liquidity providers of a pool\\n    /// @dev Calls to donate can be frontrun adding just-in-time liquidity, with the aim of receiving a portion donated funds.\\n    /// Donors should keep this in mind when designing donation mechanisms.\\n    /// @dev This function donates to in-range LPs at slot0.tick. In certain edge-cases of the swap algorithm, the `sqrtPrice` of\\n    /// a pool can be at the lower boundary of tick `n`, but the `slot0.tick` of the pool is already `n - 1`. In this case a call to\\n    /// `donate` would donate to tick `n - 1` (slot0.tick) not tick `n` (getTickAtSqrtPrice(slot0.sqrtPriceX96)).\\n    /// Read the comments in `Pool.swap()` for more information about this.\\n    /// @param key The key of the pool to donate to\\n    /// @param amount0 The amount of currency0 to donate\\n    /// @param amount1 The amount of currency1 to donate\\n    /// @param hookData The data to pass through to the donate hooks\\n    /// @return BalanceDelta The delta of the caller after the donate\\n    function donate(PoolKey memory key, uint256 amount0, uint256 amount1, bytes calldata hookData)\\n        external\\n        returns (BalanceDelta);\\n\\n    /// @notice Writes the current ERC20 balance of the specified currency to transient storage\\n    /// This is used to checkpoint balances for the manager and derive deltas for the caller.\\n    /// @dev This MUST be called before any ERC20 tokens are sent into the contract, but can be skipped\\n    /// for native tokens because the amount to settle is determined by the sent value.\\n    /// However, if an ERC20 token has been synced and not settled, and the caller instead wants to settle\\n    /// native funds, this function can be called with the native currency to then be able to settle the native currency\\n    function sync(Currency currency) external;\\n\\n    /// @notice Called by the user to net out some value owed to the user\\n    /// @dev Will revert if the requested amount is not available, consider using `mint` instead\\n    /// @dev Can also be used as a mechanism for free flash loans\\n    /// @param currency The currency to withdraw from the pool manager\\n    /// @param to The address to withdraw to\\n    /// @param amount The amount of currency to withdraw\\n    function take(Currency currency, address to, uint256 amount) external;\\n\\n    /// @notice Called by the user to pay what is owed\\n    /// @return paid The amount of currency settled\\n    function settle() external payable returns (uint256 paid);\\n\\n    /// @notice Called by the user to pay on behalf of another address\\n    /// @param recipient The address to credit for the payment\\n    /// @return paid The amount of currency settled\\n    function settleFor(address recipient) external payable returns (uint256 paid);\\n\\n    /// @notice WARNING - Any currency that is cleared, will be non-retrievable, and locked in the contract permanently.\\n    /// A call to clear will zero out a positive balance WITHOUT a corresponding transfer.\\n    /// @dev This could be used to clear a balance that is considered dust.\\n    /// Additionally, the amount must be the exact positive balance. This is to enforce that the caller is aware of the amount being cleared.\\n    function clear(Currency currency, uint256 amount) external;\\n\\n    /// @notice Called by the user to move value into ERC6909 balance\\n    /// @param to The address to mint the tokens to\\n    /// @param id The currency address to mint to ERC6909s, as a uint256\\n    /// @param amount The amount of currency to mint\\n    /// @dev The id is converted to a uint160 to correspond to a currency address\\n    /// If the upper 12 bytes are not 0, they will be 0-ed out\\n    function mint(address to, uint256 id, uint256 amount) external;\\n\\n    /// @notice Called by the user to move value from ERC6909 balance\\n    /// @param from The address to burn the tokens from\\n    /// @param id The currency address to burn from ERC6909s, as a uint256\\n    /// @param amount The amount of currency to burn\\n    /// @dev The id is converted to a uint160 to correspond to a currency address\\n    /// If the upper 12 bytes are not 0, they will be 0-ed out\\n    function burn(address from, uint256 id, uint256 amount) external;\\n\\n    /// @notice Updates the pools lp fees for the a pool that has enabled dynamic lp fees.\\n    /// @dev A swap fee totaling MAX_SWAP_FEE (100%) makes exact output swaps impossible since the input is entirely consumed by the fee\\n    /// @param key The key of the pool to update dynamic LP fees for\\n    /// @param newDynamicLPFee The new dynamic pool LP fee\\n    function updateDynamicLPFee(PoolKey memory key, uint24 newDynamicLPFee) external;\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/types/Currency.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Minimal} from \\\"../interfaces/external/IERC20Minimal.sol\\\";\\nimport {CustomRevert} from \\\"../libraries/CustomRevert.sol\\\";\\n\\ntype Currency is address;\\n\\nusing {greaterThan as >, lessThan as <, greaterThanOrEqualTo as >=, equals as ==} for Currency global;\\nusing CurrencyLibrary for Currency global;\\n\\nfunction equals(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) == Currency.unwrap(other);\\n}\\n\\nfunction greaterThan(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) > Currency.unwrap(other);\\n}\\n\\nfunction lessThan(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) < Currency.unwrap(other);\\n}\\n\\nfunction greaterThanOrEqualTo(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) >= Currency.unwrap(other);\\n}\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    /// @notice Additional context for ERC-7751 wrapped error when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Additional context for ERC-7751 wrapped error when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    /// @notice A constant to represent the native currency\\n    Currency public constant ADDRESS_ZERO = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // altered from https://github.com/transmissions11/solmate/blob/44a9963d4c78111f77caa0e65d677b8b46d6f2e6/src/utils/SafeTransferLib.sol\\n        // modified custom error selectors\\n\\n        bool success;\\n        if (currency.isAddressZero()) {\\n            assembly (\\\"memory-safe\\\") {\\n                // Transfer the ETH and revert if it fails.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n            // revert with NativeTransferFailed, containing the bubbled up error as an argument\\n            if (!success) {\\n                CustomRevert.bubbleUpAndRevertWith(to, bytes4(0), NativeTransferFailed.selector);\\n            }\\n        } else {\\n            assembly (\\\"memory-safe\\\") {\\n                // Get a pointer to some free memory.\\n                let fmp := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(fmp, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(fmp, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(fmp, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, fmp, 68, 0, 32)\\n                    )\\n\\n                // Now clean the memory we used\\n                mstore(fmp, 0) // 4 byte `selector` and 28 bytes of `to` were stored here\\n                mstore(add(fmp, 0x20), 0) // 4 bytes of `to` and 28 bytes of `amount` were stored here\\n                mstore(add(fmp, 0x40), 0) // 4 bytes of `amount` were stored here\\n            }\\n            // revert with ERC20TransferFailed, containing the bubbled up error as an argument\\n            if (!success) {\\n                CustomRevert.bubbleUpAndRevertWith(\\n                    Currency.unwrap(currency), IERC20Minimal.transfer.selector, ERC20TransferFailed.selector\\n                );\\n            }\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isAddressZero()) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20Minimal(Currency.unwrap(currency)).balanceOf(address(this));\\n        }\\n    }\\n\\n    function balanceOf(Currency currency, address owner) internal view returns (uint256) {\\n        if (currency.isAddressZero()) {\\n            return owner.balance;\\n        } else {\\n            return IERC20Minimal(Currency.unwrap(currency)).balanceOf(owner);\\n        }\\n    }\\n\\n    function isAddressZero(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(ADDRESS_ZERO);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    // If the upper 12 bytes are non-zero, they will be zero-ed out\\n    // Therefore, fromId() and toId() are not inverses of each other\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/base/hooks/BaseTokenWrapperHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    toBeforeSwapDelta, BeforeSwapDelta, BeforeSwapDeltaLibrary\\n} from \\\"@uniswap/v4-core/src/types/BeforeSwapDelta.sol\\\";\\nimport {Currency, CurrencyLibrary} from \\\"@uniswap/v4-core/src/types/Currency.sol\\\";\\nimport {PoolKey} from \\\"@uniswap/v4-core/src/types/PoolKey.sol\\\";\\nimport {SafeCast} from \\\"@uniswap/v4-core/src/libraries/SafeCast.sol\\\";\\nimport {IHooks} from \\\"@uniswap/v4-core/src/interfaces/IHooks.sol\\\";\\nimport {Hooks} from \\\"@uniswap/v4-core/src/libraries/Hooks.sol\\\";\\nimport {IPoolManager} from \\\"@uniswap/v4-core/src/interfaces/IPoolManager.sol\\\";\\nimport {BaseHook} from \\\"../../utils/BaseHook.sol\\\";\\nimport {DeltaResolver} from \\\"../DeltaResolver.sol\\\";\\n\\n/// @title Base Token Wrapper Hook\\n/// @notice Abstract base contract for implementing token wrapper hooks in Uniswap V4\\n/// @dev This contract provides the base functionality for wrapping/unwrapping tokens through V4 pools\\n/// @dev All liquidity operations are blocked as liquidity is managed through the underlying token wrapper\\n/// @dev Implementing contracts must provide deposit() and withdraw() functions\\nabstract contract BaseTokenWrapperHook is BaseHook, DeltaResolver {\\n    using CurrencyLibrary for Currency;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Thrown when attempting to add or remove liquidity\\n    /// @dev Liquidity operations are blocked since all liquidity is managed by the token wrapper\\n    error LiquidityNotAllowed();\\n\\n    /// @notice Thrown when initializing a pool with invalid tokens\\n    /// @dev Pool must contain exactly one wrapper token and its underlying token\\n    error InvalidPoolToken();\\n\\n    /// @notice Thrown when initializing a pool with non-zero fee\\n    /// @dev Fee must be 0 as wrapper pools don't charge fees\\n    error InvalidPoolFee();\\n\\n    /// @notice The wrapped token currency (e.g., WETH)\\n    Currency public immutable wrapperCurrency;\\n\\n    /// @notice The underlying token currency (e.g., ETH)\\n    Currency public immutable underlyingCurrency;\\n\\n    /// @notice Indicates whether wrapping occurs when swapping from token0 to token1\\n    /// @dev This is determined by the relative ordering of the wrapper and underlying tokens\\n    /// @dev If true: token0 is underlying (e.g. ETH) and token1 is wrapper (e.g. WETH)\\n    /// @dev If false: token0 is wrapper (e.g. WETH) and token1 is underlying (e.g. ETH)\\n    /// @dev This is set in the constructor based on the token addresses to ensure consistent behavior\\n    bool public immutable wrapZeroForOne;\\n\\n    /// @notice Creates a new token wrapper hook\\n    /// @param _manager The Uniswap V4 pool manager\\n    /// @param _wrapper The wrapped token currency (e.g., WETH)\\n    /// @param _underlying The underlying token currency (e.g., ETH)\\n    constructor(IPoolManager _manager, Currency _wrapper, Currency _underlying) BaseHook(_manager) {\\n        wrapperCurrency = _wrapper;\\n        underlyingCurrency = _underlying;\\n        wrapZeroForOne = _underlying < _wrapper;\\n    }\\n\\n    /// @inheritdoc BaseHook\\n    function getHookPermissions() public pure override returns (Hooks.Permissions memory) {\\n        return Hooks.Permissions({\\n            beforeInitialize: true,\\n            beforeAddLiquidity: true,\\n            beforeSwap: true,\\n            beforeSwapReturnDelta: true,\\n            afterSwap: false,\\n            afterInitialize: false,\\n            beforeRemoveLiquidity: false,\\n            afterAddLiquidity: false,\\n            afterRemoveLiquidity: false,\\n            beforeDonate: false,\\n            afterDonate: false,\\n            afterSwapReturnDelta: false,\\n            afterAddLiquidityReturnDelta: false,\\n            afterRemoveLiquidityReturnDelta: false\\n        });\\n    }\\n\\n    /// @notice Validates pool initialization parameters\\n    /// @dev Ensures pool contains wrapper and underlying tokens with zero fee\\n    /// @param poolKey The pool configuration including tokens and fee\\n    /// @return The function selector if validation passes\\n    function _beforeInitialize(address, PoolKey calldata poolKey, uint160) internal view override returns (bytes4) {\\n        // ensure pool tokens are the wrapper currency and underlying currency\\n        bool isValidPair = wrapZeroForOne\\n            ? (poolKey.currency0 == underlyingCurrency && poolKey.currency1 == wrapperCurrency)\\n            : (poolKey.currency0 == wrapperCurrency && poolKey.currency1 == underlyingCurrency);\\n\\n        if (!isValidPair) revert InvalidPoolToken();\\n        if (poolKey.fee != 0) revert InvalidPoolFee();\\n\\n        return IHooks.beforeInitialize.selector;\\n    }\\n\\n    /// @notice Prevents liquidity operations on wrapper pools\\n    /// @dev Always reverts as liquidity is managed through the token wrapper\\n    function _beforeAddLiquidity(address, PoolKey calldata, IPoolManager.ModifyLiquidityParams calldata, bytes calldata)\\n        internal\\n        pure\\n        override\\n        returns (bytes4)\\n    {\\n        revert LiquidityNotAllowed();\\n    }\\n\\n    /// @notice Handles token wrapping and unwrapping during swaps\\n    /// @dev Processes both exact input (amountSpecified < 0) and exact output (amountSpecified > 0) swaps\\n    /// @param params The swap parameters including direction and amount\\n    /// @return selector The function selector\\n    /// @return swapDelta The input/output token amounts for pool accounting\\n    /// @return lpFeeOverride The fee override (always 0 for wrapper pools)\\n    function _beforeSwap(address, PoolKey calldata, IPoolManager.SwapParams calldata params, bytes calldata)\\n        internal\\n        override\\n        returns (bytes4 selector, BeforeSwapDelta swapDelta, uint24 lpFeeOverride)\\n    {\\n        bool isExactInput = params.amountSpecified < 0;\\n\\n        if (wrapZeroForOne == params.zeroForOne) {\\n            // we are wrapping\\n            uint256 inputAmount =\\n                isExactInput ? uint256(-params.amountSpecified) : _getWrapInputRequired(uint256(params.amountSpecified));\\n            _take(underlyingCurrency, address(this), inputAmount);\\n            uint256 wrappedAmount = _deposit(inputAmount);\\n            _settle(wrapperCurrency, address(this), wrappedAmount);\\n            int128 amountUnspecified =\\n                isExactInput ? -wrappedAmount.toInt256().toInt128() : inputAmount.toInt256().toInt128();\\n            swapDelta = toBeforeSwapDelta(-params.amountSpecified.toInt128(), amountUnspecified);\\n        } else {\\n            // we are unwrapping\\n            uint256 inputAmount = isExactInput\\n                ? uint256(-params.amountSpecified)\\n                : _getUnwrapInputRequired(uint256(params.amountSpecified));\\n            _take(wrapperCurrency, address(this), inputAmount);\\n            uint256 unwrappedAmount = _withdraw(inputAmount);\\n            _settle(underlyingCurrency, address(this), unwrappedAmount);\\n            int128 amountUnspecified =\\n                isExactInput ? -unwrappedAmount.toInt256().toInt128() : inputAmount.toInt256().toInt128();\\n            swapDelta = toBeforeSwapDelta(-params.amountSpecified.toInt128(), amountUnspecified);\\n        }\\n\\n        return (IHooks.beforeSwap.selector, swapDelta, 0);\\n    }\\n\\n    /// @notice Transfers tokens to the pool manager\\n    /// @param token The token to transfer\\n    /// @param amount The amount to transfer\\n    /// @inheritdoc DeltaResolver\\n    function _pay(Currency token, address, uint256 amount) internal override {\\n        token.transfer(address(poolManager), amount);\\n    }\\n\\n    /// @notice Deposits underlying tokens to receive wrapper tokens\\n    /// @param underlyingAmount The amount of underlying tokens to deposit\\n    /// @return wrappedAmount The amount of wrapper tokens received\\n    /// @dev Implementing contracts should handle the wrapping operation\\n    ///      The base contract will handle settling tokens with the pool manager\\n    function _deposit(uint256 underlyingAmount) internal virtual returns (uint256 wrappedAmount);\\n\\n    /// @notice Withdraws wrapper tokens to receive underlying tokens\\n    /// @param wrappedAmount The amount of wrapper tokens to withdraw\\n    /// @return underlyingAmount The amount of underlying tokens received\\n    /// @dev Implementing contracts should handle the unwrapping operation\\n    ///      The base contract will handle settling tokens with the pool manager\\n    function _withdraw(uint256 wrappedAmount) internal virtual returns (uint256 underlyingAmount);\\n\\n    /// @notice Calculates underlying tokens needed to receive desired wrapper tokens\\n    /// @param wrappedAmount The desired amount of wrapper tokens\\n    /// @return The required amount of underlying tokens\\n    /// @dev Default implementation assumes 1:1 ratio\\n    /// @dev Override for wrappers with different exchange rates\\n    function _getWrapInputRequired(uint256 wrappedAmount) internal view virtual returns (uint256) {\\n        return wrappedAmount;\\n    }\\n\\n    /// @notice Calculates wrapper tokens needed to receive desired underlying tokens\\n    /// @param underlyingAmount The desired amount of underlying tokens\\n    /// @return The required amount of wrapper tokens\\n    /// @dev Default implementation assumes 1:1 ratio\\n    /// @dev Override for wrappers with different exchange rates\\n    function _getUnwrapInputRequired(uint256 underlyingAmount) internal view virtual returns (uint256) {\\n        return underlyingAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/IFewWrappedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IFewWrappedToken {\\n    function token() external view returns (address);\\n\\n    function wrap(uint256 amount) external returns (uint256);\\n    function unwrap(uint256 amount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/types/PoolKey.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Currency} from \\\"./Currency.sol\\\";\\nimport {IHooks} from \\\"../interfaces/IHooks.sol\\\";\\nimport {PoolIdLibrary} from \\\"./PoolId.sol\\\";\\n\\nusing PoolIdLibrary for PoolKey global;\\n\\n/// @notice Returns the key for identifying a pool\\nstruct PoolKey {\\n    /// @notice The lower currency of the pool, sorted numerically\\n    Currency currency0;\\n    /// @notice The higher currency of the pool, sorted numerically\\n    Currency currency1;\\n    /// @notice The pool LP fee, capped at 1_000_000. If the highest bit is 1, the pool has a dynamic fee and must be exactly equal to 0x800000\\n    uint24 fee;\\n    /// @notice Ticks that involve positions must be a multiple of tick spacing\\n    int24 tickSpacing;\\n    /// @notice The hooks of the pool\\n    IHooks hooks;\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/interfaces/IHooks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\nimport {BalanceDelta} from \\\"../types/BalanceDelta.sol\\\";\\nimport {IPoolManager} from \\\"./IPoolManager.sol\\\";\\nimport {BeforeSwapDelta} from \\\"../types/BeforeSwapDelta.sol\\\";\\n\\n/// @notice V4 decides whether to invoke specific hooks by inspecting the least significant bits\\n/// of the address that the hooks contract is deployed to.\\n/// For example, a hooks contract deployed to address: 0x0000000000000000000000000000000000002400\\n/// has the lowest bits '10 0100 0000 0000' which would cause the 'before initialize' and 'after add liquidity' hooks to be used.\\n/// See the Hooks library for the full spec.\\n/// @dev Should only be callable by the v4 PoolManager.\\ninterface IHooks {\\n    /// @notice The hook called before the state of a pool is initialized\\n    /// @param sender The initial msg.sender for the initialize call\\n    /// @param key The key for the pool being initialized\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\\n    /// @return bytes4 The function selector for the hook\\n    function beforeInitialize(address sender, PoolKey calldata key, uint160 sqrtPriceX96) external returns (bytes4);\\n\\n    /// @notice The hook called after the state of a pool is initialized\\n    /// @param sender The initial msg.sender for the initialize call\\n    /// @param key The key for the pool being initialized\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\\n    /// @param tick The current tick after the state of a pool is initialized\\n    /// @return bytes4 The function selector for the hook\\n    function afterInitialize(address sender, PoolKey calldata key, uint160 sqrtPriceX96, int24 tick)\\n        external\\n        returns (bytes4);\\n\\n    /// @notice The hook called before liquidity is added\\n    /// @param sender The initial msg.sender for the add liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for adding liquidity\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeAddLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after liquidity is added\\n    /// @param sender The initial msg.sender for the add liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for adding liquidity\\n    /// @param delta The caller's balance delta after adding liquidity; the sum of principal delta, fees accrued, and hook delta\\n    /// @param feesAccrued The fees accrued since the last time fees were collected from this position\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return BalanceDelta The hook's delta in token0 and token1. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    function afterAddLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        BalanceDelta delta,\\n        BalanceDelta feesAccrued,\\n        bytes calldata hookData\\n    ) external returns (bytes4, BalanceDelta);\\n\\n    /// @notice The hook called before liquidity is removed\\n    /// @param sender The initial msg.sender for the remove liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for removing liquidity\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeRemoveLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after liquidity is removed\\n    /// @param sender The initial msg.sender for the remove liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for removing liquidity\\n    /// @param delta The caller's balance delta after removing liquidity; the sum of principal delta, fees accrued, and hook delta\\n    /// @param feesAccrued The fees accrued since the last time fees were collected from this position\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return BalanceDelta The hook's delta in token0 and token1. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    function afterRemoveLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        BalanceDelta delta,\\n        BalanceDelta feesAccrued,\\n        bytes calldata hookData\\n    ) external returns (bytes4, BalanceDelta);\\n\\n    /// @notice The hook called before a swap\\n    /// @param sender The initial msg.sender for the swap call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for the swap\\n    /// @param hookData Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return BeforeSwapDelta The hook's delta in specified and unspecified currencies. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    /// @return uint24 Optionally override the lp fee, only used if three conditions are met: 1. the Pool has a dynamic fee, 2. the value's 2nd highest bit is set (23rd bit, 0x400000), and 3. the value is less than or equal to the maximum fee (1 million)\\n    function beforeSwap(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4, BeforeSwapDelta, uint24);\\n\\n    /// @notice The hook called after a swap\\n    /// @param sender The initial msg.sender for the swap call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for the swap\\n    /// @param delta The amount owed to the caller (positive) or owed to the pool (negative)\\n    /// @param hookData Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return int128 The hook's delta in unspecified currency. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    function afterSwap(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        BalanceDelta delta,\\n        bytes calldata hookData\\n    ) external returns (bytes4, int128);\\n\\n    /// @notice The hook called before donate\\n    /// @param sender The initial msg.sender for the donate call\\n    /// @param key The key for the pool\\n    /// @param amount0 The amount of token0 being donated\\n    /// @param amount1 The amount of token1 being donated\\n    /// @param hookData Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeDonate(\\n        address sender,\\n        PoolKey calldata key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after donate\\n    /// @param sender The initial msg.sender for the donate call\\n    /// @param key The key for the pool\\n    /// @param amount0 The amount of token0 being donated\\n    /// @param amount1 The amount of token1 being donated\\n    /// @param hookData Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function afterDonate(\\n        address sender,\\n        PoolKey calldata key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/interfaces/external/IERC6909Claims.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface for claims over a contract balance, wrapped as a ERC6909\\ninterface IERC6909Claims {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OperatorSet(address indexed owner, address indexed operator, bool approved);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id, uint256 amount);\\n\\n    event Transfer(address caller, address indexed from, address indexed to, uint256 indexed id, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Owner balance of an id.\\n    /// @param owner The address of the owner.\\n    /// @param id The id of the token.\\n    /// @return amount The balance of the token.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 amount);\\n\\n    /// @notice Spender allowance of an id.\\n    /// @param owner The address of the owner.\\n    /// @param spender The address of the spender.\\n    /// @param id The id of the token.\\n    /// @return amount The allowance of the token.\\n    function allowance(address owner, address spender, uint256 id) external view returns (uint256 amount);\\n\\n    /// @notice Checks if a spender is approved by an owner as an operator\\n    /// @param owner The address of the owner.\\n    /// @param spender The address of the spender.\\n    /// @return approved The approval status.\\n    function isOperator(address owner, address spender) external view returns (bool approved);\\n\\n    /// @notice Transfers an amount of an id from the caller to a receiver.\\n    /// @param receiver The address of the receiver.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    /// @return bool True, always, unless the function reverts\\n    function transfer(address receiver, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers an amount of an id from a sender to a receiver.\\n    /// @param sender The address of the sender.\\n    /// @param receiver The address of the receiver.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    /// @return bool True, always, unless the function reverts\\n    function transferFrom(address sender, address receiver, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Approves an amount of an id to a spender.\\n    /// @param spender The address of the spender.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    /// @return bool True, always\\n    function approve(address spender, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Sets or removes an operator for the caller.\\n    /// @param operator The address of the operator.\\n    /// @param approved The approval status.\\n    /// @return bool True, always\\n    function setOperator(address operator, bool approved) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/interfaces/IProtocolFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Currency} from \\\"../types/Currency.sol\\\";\\nimport {PoolId} from \\\"../types/PoolId.sol\\\";\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\n\\n/// @notice Interface for all protocol-fee related functions in the pool manager\\ninterface IProtocolFees {\\n    /// @notice Thrown when protocol fee is set too high\\n    error ProtocolFeeTooLarge(uint24 fee);\\n\\n    /// @notice Thrown when collectProtocolFees or setProtocolFee is not called by the controller.\\n    error InvalidCaller();\\n\\n    /// @notice Thrown when collectProtocolFees is attempted on a token that is synced.\\n    error ProtocolFeeCurrencySynced();\\n\\n    /// @notice Emitted when the protocol fee controller address is updated in setProtocolFeeController.\\n    event ProtocolFeeControllerUpdated(address indexed protocolFeeController);\\n\\n    /// @notice Emitted when the protocol fee is updated for a pool.\\n    event ProtocolFeeUpdated(PoolId indexed id, uint24 protocolFee);\\n\\n    /// @notice Given a currency address, returns the protocol fees accrued in that currency\\n    /// @param currency The currency to check\\n    /// @return amount The amount of protocol fees accrued in the currency\\n    function protocolFeesAccrued(Currency currency) external view returns (uint256 amount);\\n\\n    /// @notice Sets the protocol fee for the given pool\\n    /// @param key The key of the pool to set a protocol fee for\\n    /// @param newProtocolFee The fee to set\\n    function setProtocolFee(PoolKey memory key, uint24 newProtocolFee) external;\\n\\n    /// @notice Sets the protocol fee controller\\n    /// @param controller The new protocol fee controller\\n    function setProtocolFeeController(address controller) external;\\n\\n    /// @notice Collects the protocol fees for a given recipient and currency, returning the amount collected\\n    /// @dev This will revert if the contract is unlocked\\n    /// @param recipient The address to receive the protocol fees\\n    /// @param currency The currency to withdraw\\n    /// @param amount The amount of currency to withdraw\\n    /// @return amountCollected The amount of currency successfully withdrawn\\n    function collectProtocolFees(address recipient, Currency currency, uint256 amount)\\n        external\\n        returns (uint256 amountCollected);\\n\\n    /// @notice Returns the current protocol fee controller address\\n    /// @return address The current protocol fee controller address\\n    function protocolFeeController() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/types/BalanceDelta.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeCast} from \\\"../libraries/SafeCast.sol\\\";\\n\\n/// @dev Two `int128` values packed into a single `int256` where the upper 128 bits represent the amount0\\n/// and the lower 128 bits represent the amount1.\\ntype BalanceDelta is int256;\\n\\nusing {add as +, sub as -, eq as ==, neq as !=} for BalanceDelta global;\\nusing BalanceDeltaLibrary for BalanceDelta global;\\nusing SafeCast for int256;\\n\\nfunction toBalanceDelta(int128 _amount0, int128 _amount1) pure returns (BalanceDelta balanceDelta) {\\n    assembly (\\\"memory-safe\\\") {\\n        balanceDelta := or(shl(128, _amount0), and(sub(shl(128, 1), 1), _amount1))\\n    }\\n}\\n\\nfunction add(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {\\n    int256 res0;\\n    int256 res1;\\n    assembly (\\\"memory-safe\\\") {\\n        let a0 := sar(128, a)\\n        let a1 := signextend(15, a)\\n        let b0 := sar(128, b)\\n        let b1 := signextend(15, b)\\n        res0 := add(a0, b0)\\n        res1 := add(a1, b1)\\n    }\\n    return toBalanceDelta(res0.toInt128(), res1.toInt128());\\n}\\n\\nfunction sub(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {\\n    int256 res0;\\n    int256 res1;\\n    assembly (\\\"memory-safe\\\") {\\n        let a0 := sar(128, a)\\n        let a1 := signextend(15, a)\\n        let b0 := sar(128, b)\\n        let b1 := signextend(15, b)\\n        res0 := sub(a0, b0)\\n        res1 := sub(a1, b1)\\n    }\\n    return toBalanceDelta(res0.toInt128(), res1.toInt128());\\n}\\n\\nfunction eq(BalanceDelta a, BalanceDelta b) pure returns (bool) {\\n    return BalanceDelta.unwrap(a) == BalanceDelta.unwrap(b);\\n}\\n\\nfunction neq(BalanceDelta a, BalanceDelta b) pure returns (bool) {\\n    return BalanceDelta.unwrap(a) != BalanceDelta.unwrap(b);\\n}\\n\\n/// @notice Library for getting the amount0 and amount1 deltas from the BalanceDelta type\\nlibrary BalanceDeltaLibrary {\\n    /// @notice A BalanceDelta of 0\\n    BalanceDelta public constant ZERO_DELTA = BalanceDelta.wrap(0);\\n\\n    function amount0(BalanceDelta balanceDelta) internal pure returns (int128 _amount0) {\\n        assembly (\\\"memory-safe\\\") {\\n            _amount0 := sar(128, balanceDelta)\\n        }\\n    }\\n\\n    function amount1(BalanceDelta balanceDelta) internal pure returns (int128 _amount1) {\\n        assembly (\\\"memory-safe\\\") {\\n            _amount1 := signextend(15, balanceDelta)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/types/PoolId.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PoolKey} from \\\"./PoolKey.sol\\\";\\n\\ntype PoolId is bytes32;\\n\\n/// @notice Library for computing the ID of a pool\\nlibrary PoolIdLibrary {\\n    /// @notice Returns value equal to keccak256(abi.encode(poolKey))\\n    function toId(PoolKey memory poolKey) internal pure returns (PoolId poolId) {\\n        assembly (\\\"memory-safe\\\") {\\n            // 0xa0 represents the total size of the poolKey struct (5 slots of 32 bytes)\\n            poolId := keccak256(poolKey, 0xa0)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/interfaces/IExtsload.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface for functions to access any storage slot in a contract\\ninterface IExtsload {\\n    /// @notice Called by external contracts to access granular pool state\\n    /// @param slot Key of slot to sload\\n    /// @return value The value of the slot as bytes32\\n    function extsload(bytes32 slot) external view returns (bytes32 value);\\n\\n    /// @notice Called by external contracts to access granular pool state\\n    /// @param startSlot Key of slot to start sloading from\\n    /// @param nSlots Number of slots to load into return value\\n    /// @return values List of loaded values.\\n    function extsload(bytes32 startSlot, uint256 nSlots) external view returns (bytes32[] memory values);\\n\\n    /// @notice Called by external contracts to access sparse pool state\\n    /// @param slots List of slots to SLOAD from.\\n    /// @return values List of loaded values.\\n    function extsload(bytes32[] calldata slots) external view returns (bytes32[] memory values);\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/interfaces/IExttload.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Interface for functions to access any transient storage slot in a contract\\ninterface IExttload {\\n    /// @notice Called by external contracts to access transient storage of the contract\\n    /// @param slot Key of slot to tload\\n    /// @return value The value of the slot as bytes32\\n    function exttload(bytes32 slot) external view returns (bytes32 value);\\n\\n    /// @notice Called by external contracts to access sparse transient pool state\\n    /// @param slots List of slots to tload\\n    /// @return values List of loaded values\\n    function exttload(bytes32[] calldata slots) external view returns (bytes32[] memory values);\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/interfaces/external/IERC20Minimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns an account's balance in the token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/libraries/CustomRevert.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Library for reverting with custom errors efficiently\\n/// @notice Contains functions for reverting with custom errors with different argument types efficiently\\n/// @dev To use this library, declare `using CustomRevert for bytes4;` and replace `revert CustomError()` with\\n/// `CustomError.selector.revertWith()`\\n/// @dev The functions may tamper with the free memory pointer but it is fine since the call context is exited immediately\\nlibrary CustomRevert {\\n    /// @dev ERC-7751 error for wrapping bubbled up reverts\\n    error WrappedError(address target, bytes4 selector, bytes reason, bytes details);\\n\\n    /// @dev Reverts with the selector of a custom error in the scratch space\\n    function revertWith(bytes4 selector) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            revert(0, 0x04)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an address argument in the scratch space\\n    function revertWith(bytes4 selector, address addr) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(addr, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an int24 argument in the scratch space\\n    function revertWith(bytes4 selector, int24 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, signextend(2, value))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with a uint160 argument in the scratch space\\n    function revertWith(bytes4 selector, uint160 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two int24 arguments\\n    function revertWith(bytes4 selector, int24 value1, int24 value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), signextend(2, value1))\\n            mstore(add(fmp, 0x24), signextend(2, value2))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two uint160 arguments\\n    function revertWith(bytes4 selector, uint160 value1, uint160 value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(fmp, 0x24), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two address arguments\\n    function revertWith(bytes4 selector, address value1, address value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(fmp, 0x24), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @notice bubble up the revert message returned by a call and revert with a wrapped ERC-7751 error\\n    /// @dev this method can be vulnerable to revert data bombs\\n    function bubbleUpAndRevertWith(\\n        address revertingContract,\\n        bytes4 revertingFunctionSelector,\\n        bytes4 additionalContext\\n    ) internal pure {\\n        bytes4 wrappedErrorSelector = WrappedError.selector;\\n        assembly (\\\"memory-safe\\\") {\\n            // Ensure the size of the revert data is a multiple of 32 bytes\\n            let encodedDataSize := mul(div(add(returndatasize(), 31), 32), 32)\\n\\n            let fmp := mload(0x40)\\n\\n            // Encode wrapped error selector, address, function selector, offset, additional context, size, revert reason\\n            mstore(fmp, wrappedErrorSelector)\\n            mstore(add(fmp, 0x04), and(revertingContract, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(\\n                add(fmp, 0x24),\\n                and(revertingFunctionSelector, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n            )\\n            // offset revert reason\\n            mstore(add(fmp, 0x44), 0x80)\\n            // offset additional context\\n            mstore(add(fmp, 0x64), add(0xa0, encodedDataSize))\\n            // size revert reason\\n            mstore(add(fmp, 0x84), returndatasize())\\n            // revert reason\\n            returndatacopy(add(fmp, 0xa4), 0, returndatasize())\\n            // size additional context\\n            mstore(add(fmp, add(0xa4, encodedDataSize)), 0x04)\\n            // additional context\\n            mstore(\\n                add(fmp, add(0xc4, encodedDataSize)),\\n                and(additionalContext, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n            )\\n            revert(fmp, add(0xe4, encodedDataSize))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/types/BeforeSwapDelta.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Return type of the beforeSwap hook.\\n// Upper 128 bits is the delta in specified tokens. Lower 128 bits is delta in unspecified tokens (to match the afterSwap hook)\\ntype BeforeSwapDelta is int256;\\n\\n// Creates a BeforeSwapDelta from specified and unspecified\\nfunction toBeforeSwapDelta(int128 deltaSpecified, int128 deltaUnspecified)\\n    pure\\n    returns (BeforeSwapDelta beforeSwapDelta)\\n{\\n    assembly (\\\"memory-safe\\\") {\\n        beforeSwapDelta := or(shl(128, deltaSpecified), and(sub(shl(128, 1), 1), deltaUnspecified))\\n    }\\n}\\n\\n/// @notice Library for getting the specified and unspecified deltas from the BeforeSwapDelta type\\nlibrary BeforeSwapDeltaLibrary {\\n    /// @notice A BeforeSwapDelta of 0\\n    BeforeSwapDelta public constant ZERO_DELTA = BeforeSwapDelta.wrap(0);\\n\\n    /// extracts int128 from the upper 128 bits of the BeforeSwapDelta\\n    /// returned by beforeSwap\\n    function getSpecifiedDelta(BeforeSwapDelta delta) internal pure returns (int128 deltaSpecified) {\\n        assembly (\\\"memory-safe\\\") {\\n            deltaSpecified := sar(128, delta)\\n        }\\n    }\\n\\n    /// extracts int128 from the lower 128 bits of the BeforeSwapDelta\\n    /// returned by beforeSwap and afterSwap\\n    function getUnspecifiedDelta(BeforeSwapDelta delta) internal pure returns (int128 deltaUnspecified) {\\n        assembly (\\\"memory-safe\\\") {\\n            deltaUnspecified := signextend(15, delta)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    using CustomRevert for bytes4;\\n\\n    error SafeCastOverflow();\\n\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return y The downcasted integer, now type uint160\\n    function toUint160(uint256 x) internal pure returns (uint160 y) {\\n        y = uint160(x);\\n        if (y != x) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a uint256 to a uint128, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return y The downcasted integer, now type uint128\\n    function toUint128(uint256 x) internal pure returns (uint128 y) {\\n        y = uint128(x);\\n        if (x != y) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a int128 to a uint128, revert on overflow or underflow\\n    /// @param x The int128 to be casted\\n    /// @return y The casted integer, now type uint128\\n    function toUint128(int128 x) internal pure returns (uint128 y) {\\n        if (x < 0) SafeCastOverflow.selector.revertWith();\\n        y = uint128(x);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param x The int256 to be downcasted\\n    /// @return y The downcasted integer, now type int128\\n    function toInt128(int256 x) internal pure returns (int128 y) {\\n        y = int128(x);\\n        if (y != x) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param x The uint256 to be casted\\n    /// @return y The casted integer, now type int256\\n    function toInt256(uint256 x) internal pure returns (int256 y) {\\n        y = int256(x);\\n        if (y < 0) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a uint256 to a int128, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return The downcasted integer, now type int128\\n    function toInt128(uint256 x) internal pure returns (int128) {\\n        if (x >= 1 << 127) SafeCastOverflow.selector.revertWith();\\n        return int128(int256(x));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/libraries/Hooks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\nimport {IHooks} from \\\"../interfaces/IHooks.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\nimport {LPFeeLibrary} from \\\"./LPFeeLibrary.sol\\\";\\nimport {BalanceDelta, toBalanceDelta, BalanceDeltaLibrary} from \\\"../types/BalanceDelta.sol\\\";\\nimport {BeforeSwapDelta, BeforeSwapDeltaLibrary} from \\\"../types/BeforeSwapDelta.sol\\\";\\nimport {IPoolManager} from \\\"../interfaces/IPoolManager.sol\\\";\\nimport {ParseBytes} from \\\"./ParseBytes.sol\\\";\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @notice V4 decides whether to invoke specific hooks by inspecting the least significant bits\\n/// of the address that the hooks contract is deployed to.\\n/// For example, a hooks contract deployed to address: 0x0000000000000000000000000000000000002400\\n/// has the lowest bits '10 0100 0000 0000' which would cause the 'before initialize' and 'after add liquidity' hooks to be used.\\nlibrary Hooks {\\n    using LPFeeLibrary for uint24;\\n    using Hooks for IHooks;\\n    using SafeCast for int256;\\n    using BeforeSwapDeltaLibrary for BeforeSwapDelta;\\n    using ParseBytes for bytes;\\n    using CustomRevert for bytes4;\\n\\n    uint160 internal constant ALL_HOOK_MASK = uint160((1 << 14) - 1);\\n\\n    uint160 internal constant BEFORE_INITIALIZE_FLAG = 1 << 13;\\n    uint160 internal constant AFTER_INITIALIZE_FLAG = 1 << 12;\\n\\n    uint160 internal constant BEFORE_ADD_LIQUIDITY_FLAG = 1 << 11;\\n    uint160 internal constant AFTER_ADD_LIQUIDITY_FLAG = 1 << 10;\\n\\n    uint160 internal constant BEFORE_REMOVE_LIQUIDITY_FLAG = 1 << 9;\\n    uint160 internal constant AFTER_REMOVE_LIQUIDITY_FLAG = 1 << 8;\\n\\n    uint160 internal constant BEFORE_SWAP_FLAG = 1 << 7;\\n    uint160 internal constant AFTER_SWAP_FLAG = 1 << 6;\\n\\n    uint160 internal constant BEFORE_DONATE_FLAG = 1 << 5;\\n    uint160 internal constant AFTER_DONATE_FLAG = 1 << 4;\\n\\n    uint160 internal constant BEFORE_SWAP_RETURNS_DELTA_FLAG = 1 << 3;\\n    uint160 internal constant AFTER_SWAP_RETURNS_DELTA_FLAG = 1 << 2;\\n    uint160 internal constant AFTER_ADD_LIQUIDITY_RETURNS_DELTA_FLAG = 1 << 1;\\n    uint160 internal constant AFTER_REMOVE_LIQUIDITY_RETURNS_DELTA_FLAG = 1 << 0;\\n\\n    struct Permissions {\\n        bool beforeInitialize;\\n        bool afterInitialize;\\n        bool beforeAddLiquidity;\\n        bool afterAddLiquidity;\\n        bool beforeRemoveLiquidity;\\n        bool afterRemoveLiquidity;\\n        bool beforeSwap;\\n        bool afterSwap;\\n        bool beforeDonate;\\n        bool afterDonate;\\n        bool beforeSwapReturnDelta;\\n        bool afterSwapReturnDelta;\\n        bool afterAddLiquidityReturnDelta;\\n        bool afterRemoveLiquidityReturnDelta;\\n    }\\n\\n    /// @notice Thrown if the address will not lead to the specified hook calls being called\\n    /// @param hooks The address of the hooks contract\\n    error HookAddressNotValid(address hooks);\\n\\n    /// @notice Hook did not return its selector\\n    error InvalidHookResponse();\\n\\n    /// @notice Additional context for ERC-7751 wrapped error when a hook call fails\\n    error HookCallFailed();\\n\\n    /// @notice The hook's delta changed the swap from exactIn to exactOut or vice versa\\n    error HookDeltaExceedsSwapAmount();\\n\\n    /// @notice Utility function intended to be used in hook constructors to ensure\\n    /// the deployed hooks address causes the intended hooks to be called\\n    /// @param permissions The hooks that are intended to be called\\n    /// @dev permissions param is memory as the function will be called from constructors\\n    function validateHookPermissions(IHooks self, Permissions memory permissions) internal pure {\\n        if (\\n            permissions.beforeInitialize != self.hasPermission(BEFORE_INITIALIZE_FLAG)\\n                || permissions.afterInitialize != self.hasPermission(AFTER_INITIALIZE_FLAG)\\n                || permissions.beforeAddLiquidity != self.hasPermission(BEFORE_ADD_LIQUIDITY_FLAG)\\n                || permissions.afterAddLiquidity != self.hasPermission(AFTER_ADD_LIQUIDITY_FLAG)\\n                || permissions.beforeRemoveLiquidity != self.hasPermission(BEFORE_REMOVE_LIQUIDITY_FLAG)\\n                || permissions.afterRemoveLiquidity != self.hasPermission(AFTER_REMOVE_LIQUIDITY_FLAG)\\n                || permissions.beforeSwap != self.hasPermission(BEFORE_SWAP_FLAG)\\n                || permissions.afterSwap != self.hasPermission(AFTER_SWAP_FLAG)\\n                || permissions.beforeDonate != self.hasPermission(BEFORE_DONATE_FLAG)\\n                || permissions.afterDonate != self.hasPermission(AFTER_DONATE_FLAG)\\n                || permissions.beforeSwapReturnDelta != self.hasPermission(BEFORE_SWAP_RETURNS_DELTA_FLAG)\\n                || permissions.afterSwapReturnDelta != self.hasPermission(AFTER_SWAP_RETURNS_DELTA_FLAG)\\n                || permissions.afterAddLiquidityReturnDelta != self.hasPermission(AFTER_ADD_LIQUIDITY_RETURNS_DELTA_FLAG)\\n                || permissions.afterRemoveLiquidityReturnDelta\\n                    != self.hasPermission(AFTER_REMOVE_LIQUIDITY_RETURNS_DELTA_FLAG)\\n        ) {\\n            HookAddressNotValid.selector.revertWith(address(self));\\n        }\\n    }\\n\\n    /// @notice Ensures that the hook address includes at least one hook flag or dynamic fees, or is the 0 address\\n    /// @param self The hook to verify\\n    /// @param fee The fee of the pool the hook is used with\\n    /// @return bool True if the hook address is valid\\n    function isValidHookAddress(IHooks self, uint24 fee) internal pure returns (bool) {\\n        // The hook can only have a flag to return a hook delta on an action if it also has the corresponding action flag\\n        if (!self.hasPermission(BEFORE_SWAP_FLAG) && self.hasPermission(BEFORE_SWAP_RETURNS_DELTA_FLAG)) return false;\\n        if (!self.hasPermission(AFTER_SWAP_FLAG) && self.hasPermission(AFTER_SWAP_RETURNS_DELTA_FLAG)) return false;\\n        if (!self.hasPermission(AFTER_ADD_LIQUIDITY_FLAG) && self.hasPermission(AFTER_ADD_LIQUIDITY_RETURNS_DELTA_FLAG))\\n        {\\n            return false;\\n        }\\n        if (\\n            !self.hasPermission(AFTER_REMOVE_LIQUIDITY_FLAG)\\n                && self.hasPermission(AFTER_REMOVE_LIQUIDITY_RETURNS_DELTA_FLAG)\\n        ) return false;\\n\\n        // If there is no hook contract set, then fee cannot be dynamic\\n        // If a hook contract is set, it must have at least 1 flag set, or have a dynamic fee\\n        return address(self) == address(0)\\n            ? !fee.isDynamicFee()\\n            : (uint160(address(self)) & ALL_HOOK_MASK > 0 || fee.isDynamicFee());\\n    }\\n\\n    /// @notice performs a hook call using the given calldata on the given hook that doesn't return a delta\\n    /// @return result The complete data returned by the hook\\n    function callHook(IHooks self, bytes memory data) internal returns (bytes memory result) {\\n        bool success;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), self, 0, add(data, 0x20), mload(data), 0, 0)\\n        }\\n        // Revert with FailedHookCall, containing any error message to bubble up\\n        if (!success) CustomRevert.bubbleUpAndRevertWith(address(self), bytes4(data), HookCallFailed.selector);\\n\\n        // The call was successful, fetch the returned data\\n        assembly (\\\"memory-safe\\\") {\\n            // allocate result byte array from the free memory pointer\\n            result := mload(0x40)\\n            // store new free memory pointer at the end of the array padded to 32 bytes\\n            mstore(0x40, add(result, and(add(returndatasize(), 0x3f), not(0x1f))))\\n            // store length in memory\\n            mstore(result, returndatasize())\\n            // copy return data to result\\n            returndatacopy(add(result, 0x20), 0, returndatasize())\\n        }\\n\\n        // Length must be at least 32 to contain the selector. Check expected selector and returned selector match.\\n        if (result.length < 32 || result.parseSelector() != data.parseSelector()) {\\n            InvalidHookResponse.selector.revertWith();\\n        }\\n    }\\n\\n    /// @notice performs a hook call using the given calldata on the given hook\\n    /// @return int256 The delta returned by the hook\\n    function callHookWithReturnDelta(IHooks self, bytes memory data, bool parseReturn) internal returns (int256) {\\n        bytes memory result = callHook(self, data);\\n\\n        // If this hook wasn't meant to return something, default to 0 delta\\n        if (!parseReturn) return 0;\\n\\n        // A length of 64 bytes is required to return a bytes4, and a 32 byte delta\\n        if (result.length != 64) InvalidHookResponse.selector.revertWith();\\n        return result.parseReturnDelta();\\n    }\\n\\n    /// @notice modifier to prevent calling a hook if they initiated the action\\n    modifier noSelfCall(IHooks self) {\\n        if (msg.sender != address(self)) {\\n            _;\\n        }\\n    }\\n\\n    /// @notice calls beforeInitialize hook if permissioned and validates return value\\n    function beforeInitialize(IHooks self, PoolKey memory key, uint160 sqrtPriceX96) internal noSelfCall(self) {\\n        if (self.hasPermission(BEFORE_INITIALIZE_FLAG)) {\\n            self.callHook(abi.encodeCall(IHooks.beforeInitialize, (msg.sender, key, sqrtPriceX96)));\\n        }\\n    }\\n\\n    /// @notice calls afterInitialize hook if permissioned and validates return value\\n    function afterInitialize(IHooks self, PoolKey memory key, uint160 sqrtPriceX96, int24 tick)\\n        internal\\n        noSelfCall(self)\\n    {\\n        if (self.hasPermission(AFTER_INITIALIZE_FLAG)) {\\n            self.callHook(abi.encodeCall(IHooks.afterInitialize, (msg.sender, key, sqrtPriceX96, tick)));\\n        }\\n    }\\n\\n    /// @notice calls beforeModifyLiquidity hook if permissioned and validates return value\\n    function beforeModifyLiquidity(\\n        IHooks self,\\n        PoolKey memory key,\\n        IPoolManager.ModifyLiquidityParams memory params,\\n        bytes calldata hookData\\n    ) internal noSelfCall(self) {\\n        if (params.liquidityDelta > 0 && self.hasPermission(BEFORE_ADD_LIQUIDITY_FLAG)) {\\n            self.callHook(abi.encodeCall(IHooks.beforeAddLiquidity, (msg.sender, key, params, hookData)));\\n        } else if (params.liquidityDelta <= 0 && self.hasPermission(BEFORE_REMOVE_LIQUIDITY_FLAG)) {\\n            self.callHook(abi.encodeCall(IHooks.beforeRemoveLiquidity, (msg.sender, key, params, hookData)));\\n        }\\n    }\\n\\n    /// @notice calls afterModifyLiquidity hook if permissioned and validates return value\\n    function afterModifyLiquidity(\\n        IHooks self,\\n        PoolKey memory key,\\n        IPoolManager.ModifyLiquidityParams memory params,\\n        BalanceDelta delta,\\n        BalanceDelta feesAccrued,\\n        bytes calldata hookData\\n    ) internal returns (BalanceDelta callerDelta, BalanceDelta hookDelta) {\\n        if (msg.sender == address(self)) return (delta, BalanceDeltaLibrary.ZERO_DELTA);\\n\\n        callerDelta = delta;\\n        if (params.liquidityDelta > 0) {\\n            if (self.hasPermission(AFTER_ADD_LIQUIDITY_FLAG)) {\\n                hookDelta = BalanceDelta.wrap(\\n                    self.callHookWithReturnDelta(\\n                        abi.encodeCall(\\n                            IHooks.afterAddLiquidity, (msg.sender, key, params, delta, feesAccrued, hookData)\\n                        ),\\n                        self.hasPermission(AFTER_ADD_LIQUIDITY_RETURNS_DELTA_FLAG)\\n                    )\\n                );\\n                callerDelta = callerDelta - hookDelta;\\n            }\\n        } else {\\n            if (self.hasPermission(AFTER_REMOVE_LIQUIDITY_FLAG)) {\\n                hookDelta = BalanceDelta.wrap(\\n                    self.callHookWithReturnDelta(\\n                        abi.encodeCall(\\n                            IHooks.afterRemoveLiquidity, (msg.sender, key, params, delta, feesAccrued, hookData)\\n                        ),\\n                        self.hasPermission(AFTER_REMOVE_LIQUIDITY_RETURNS_DELTA_FLAG)\\n                    )\\n                );\\n                callerDelta = callerDelta - hookDelta;\\n            }\\n        }\\n    }\\n\\n    /// @notice calls beforeSwap hook if permissioned and validates return value\\n    function beforeSwap(IHooks self, PoolKey memory key, IPoolManager.SwapParams memory params, bytes calldata hookData)\\n        internal\\n        returns (int256 amountToSwap, BeforeSwapDelta hookReturn, uint24 lpFeeOverride)\\n    {\\n        amountToSwap = params.amountSpecified;\\n        if (msg.sender == address(self)) return (amountToSwap, BeforeSwapDeltaLibrary.ZERO_DELTA, lpFeeOverride);\\n\\n        if (self.hasPermission(BEFORE_SWAP_FLAG)) {\\n            bytes memory result = callHook(self, abi.encodeCall(IHooks.beforeSwap, (msg.sender, key, params, hookData)));\\n\\n            // A length of 96 bytes is required to return a bytes4, a 32 byte delta, and an LP fee\\n            if (result.length != 96) InvalidHookResponse.selector.revertWith();\\n\\n            // dynamic fee pools that want to override the cache fee, return a valid fee with the override flag. If override flag\\n            // is set but an invalid fee is returned, the transaction will revert. Otherwise the current LP fee will be used\\n            if (key.fee.isDynamicFee()) lpFeeOverride = result.parseFee();\\n\\n            // skip this logic for the case where the hook return is 0\\n            if (self.hasPermission(BEFORE_SWAP_RETURNS_DELTA_FLAG)) {\\n                hookReturn = BeforeSwapDelta.wrap(result.parseReturnDelta());\\n\\n                // any return in unspecified is passed to the afterSwap hook for handling\\n                int128 hookDeltaSpecified = hookReturn.getSpecifiedDelta();\\n\\n                // Update the swap amount according to the hook's return, and check that the swap type doesn't change (exact input/output)\\n                if (hookDeltaSpecified != 0) {\\n                    bool exactInput = amountToSwap < 0;\\n                    amountToSwap += hookDeltaSpecified;\\n                    if (exactInput ? amountToSwap > 0 : amountToSwap < 0) {\\n                        HookDeltaExceedsSwapAmount.selector.revertWith();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice calls afterSwap hook if permissioned and validates return value\\n    function afterSwap(\\n        IHooks self,\\n        PoolKey memory key,\\n        IPoolManager.SwapParams memory params,\\n        BalanceDelta swapDelta,\\n        bytes calldata hookData,\\n        BeforeSwapDelta beforeSwapHookReturn\\n    ) internal returns (BalanceDelta, BalanceDelta) {\\n        if (msg.sender == address(self)) return (swapDelta, BalanceDeltaLibrary.ZERO_DELTA);\\n\\n        int128 hookDeltaSpecified = beforeSwapHookReturn.getSpecifiedDelta();\\n        int128 hookDeltaUnspecified = beforeSwapHookReturn.getUnspecifiedDelta();\\n\\n        if (self.hasPermission(AFTER_SWAP_FLAG)) {\\n            hookDeltaUnspecified += self.callHookWithReturnDelta(\\n                abi.encodeCall(IHooks.afterSwap, (msg.sender, key, params, swapDelta, hookData)),\\n                self.hasPermission(AFTER_SWAP_RETURNS_DELTA_FLAG)\\n            ).toInt128();\\n        }\\n\\n        BalanceDelta hookDelta;\\n        if (hookDeltaUnspecified != 0 || hookDeltaSpecified != 0) {\\n            hookDelta = (params.amountSpecified < 0 == params.zeroForOne)\\n                ? toBalanceDelta(hookDeltaSpecified, hookDeltaUnspecified)\\n                : toBalanceDelta(hookDeltaUnspecified, hookDeltaSpecified);\\n\\n            // the caller has to pay for (or receive) the hook's delta\\n            swapDelta = swapDelta - hookDelta;\\n        }\\n        return (swapDelta, hookDelta);\\n    }\\n\\n    /// @notice calls beforeDonate hook if permissioned and validates return value\\n    function beforeDonate(IHooks self, PoolKey memory key, uint256 amount0, uint256 amount1, bytes calldata hookData)\\n        internal\\n        noSelfCall(self)\\n    {\\n        if (self.hasPermission(BEFORE_DONATE_FLAG)) {\\n            self.callHook(abi.encodeCall(IHooks.beforeDonate, (msg.sender, key, amount0, amount1, hookData)));\\n        }\\n    }\\n\\n    /// @notice calls afterDonate hook if permissioned and validates return value\\n    function afterDonate(IHooks self, PoolKey memory key, uint256 amount0, uint256 amount1, bytes calldata hookData)\\n        internal\\n        noSelfCall(self)\\n    {\\n        if (self.hasPermission(AFTER_DONATE_FLAG)) {\\n            self.callHook(abi.encodeCall(IHooks.afterDonate, (msg.sender, key, amount0, amount1, hookData)));\\n        }\\n    }\\n\\n    function hasPermission(IHooks self, uint160 flag) internal pure returns (bool) {\\n        return uint160(address(self)) & flag != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/BaseHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Hooks} from \\\"@uniswap/v4-core/src/libraries/Hooks.sol\\\";\\nimport {IPoolManager} from \\\"@uniswap/v4-core/src/interfaces/IPoolManager.sol\\\";\\nimport {IHooks} from \\\"@uniswap/v4-core/src/interfaces/IHooks.sol\\\";\\nimport {BalanceDelta} from \\\"@uniswap/v4-core/src/types/BalanceDelta.sol\\\";\\nimport {PoolKey} from \\\"@uniswap/v4-core/src/types/PoolKey.sol\\\";\\nimport {BeforeSwapDelta} from \\\"@uniswap/v4-core/src/types/BeforeSwapDelta.sol\\\";\\nimport {ImmutableState} from \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title Base Hook\\n/// @notice abstract contract for hook implementations\\nabstract contract BaseHook is IHooks, ImmutableState {\\n    error HookNotImplemented();\\n\\n    constructor(IPoolManager _manager) ImmutableState(_manager) {\\n        validateHookAddress(this);\\n    }\\n\\n    /// @notice Returns a struct of permissions to signal which hook functions are to be implemented\\n    /// @dev Used at deployment to validate the address correctly represents the expected permissions\\n    function getHookPermissions() public pure virtual returns (Hooks.Permissions memory);\\n\\n    /// @notice Validates the deployed hook address agrees with the expected permissions of the hook\\n    /// @dev this function is virtual so that we can override it during testing,\\n    /// which allows us to deploy an implementation to any address\\n    /// and then etch the bytecode into the correct address\\n    function validateHookAddress(BaseHook _this) internal pure virtual {\\n        Hooks.validateHookPermissions(_this, getHookPermissions());\\n    }\\n\\n    /// @inheritdoc IHooks\\n    function beforeInitialize(address sender, PoolKey calldata key, uint160 sqrtPriceX96)\\n        external\\n        onlyPoolManager\\n        returns (bytes4)\\n    {\\n        return _beforeInitialize(sender, key, sqrtPriceX96);\\n    }\\n\\n    function _beforeInitialize(address, PoolKey calldata, uint160) internal virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    /// @inheritdoc IHooks\\n    function afterInitialize(address sender, PoolKey calldata key, uint160 sqrtPriceX96, int24 tick)\\n        external\\n        onlyPoolManager\\n        returns (bytes4)\\n    {\\n        return _afterInitialize(sender, key, sqrtPriceX96, tick);\\n    }\\n\\n    function _afterInitialize(address, PoolKey calldata, uint160, int24) internal virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    /// @inheritdoc IHooks\\n    function beforeAddLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        bytes calldata hookData\\n    ) external onlyPoolManager returns (bytes4) {\\n        return _beforeAddLiquidity(sender, key, params, hookData);\\n    }\\n\\n    function _beforeAddLiquidity(address, PoolKey calldata, IPoolManager.ModifyLiquidityParams calldata, bytes calldata)\\n        internal\\n        virtual\\n        returns (bytes4)\\n    {\\n        revert HookNotImplemented();\\n    }\\n\\n    /// @inheritdoc IHooks\\n    function beforeRemoveLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        bytes calldata hookData\\n    ) external onlyPoolManager returns (bytes4) {\\n        return _beforeRemoveLiquidity(sender, key, params, hookData);\\n    }\\n\\n    function _beforeRemoveLiquidity(\\n        address,\\n        PoolKey calldata,\\n        IPoolManager.ModifyLiquidityParams calldata,\\n        bytes calldata\\n    ) internal virtual returns (bytes4) {\\n        revert HookNotImplemented();\\n    }\\n\\n    /// @inheritdoc IHooks\\n    function afterAddLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        BalanceDelta delta,\\n        BalanceDelta feesAccrued,\\n        bytes calldata hookData\\n    ) external onlyPoolManager returns (bytes4, BalanceDelta) {\\n        return _afterAddLiquidity(sender, key, params, delta, feesAccrued, hookData);\\n    }\\n\\n    function _afterAddLiquidity(\\n        address,\\n        PoolKey calldata,\\n        IPoolManager.ModifyLiquidityParams calldata,\\n        BalanceDelta,\\n        BalanceDelta,\\n        bytes calldata\\n    ) internal virtual returns (bytes4, BalanceDelta) {\\n        revert HookNotImplemented();\\n    }\\n\\n    /// @inheritdoc IHooks\\n    function afterRemoveLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        BalanceDelta delta,\\n        BalanceDelta feesAccrued,\\n        bytes calldata hookData\\n    ) external onlyPoolManager returns (bytes4, BalanceDelta) {\\n        return _afterRemoveLiquidity(sender, key, params, delta, feesAccrued, hookData);\\n    }\\n\\n    function _afterRemoveLiquidity(\\n        address,\\n        PoolKey calldata,\\n        IPoolManager.ModifyLiquidityParams calldata,\\n        BalanceDelta,\\n        BalanceDelta,\\n        bytes calldata\\n    ) internal virtual returns (bytes4, BalanceDelta) {\\n        revert HookNotImplemented();\\n    }\\n\\n    /// @inheritdoc IHooks\\n    function beforeSwap(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        bytes calldata hookData\\n    ) external onlyPoolManager returns (bytes4, BeforeSwapDelta, uint24) {\\n        return _beforeSwap(sender, key, params, hookData);\\n    }\\n\\n    function _beforeSwap(address, PoolKey calldata, IPoolManager.SwapParams calldata, bytes calldata)\\n        internal\\n        virtual\\n        returns (bytes4, BeforeSwapDelta, uint24)\\n    {\\n        revert HookNotImplemented();\\n    }\\n\\n    /// @inheritdoc IHooks\\n    function afterSwap(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        BalanceDelta delta,\\n        bytes calldata hookData\\n    ) external onlyPoolManager returns (bytes4, int128) {\\n        return _afterSwap(sender, key, params, delta, hookData);\\n    }\\n\\n    function _afterSwap(address, PoolKey calldata, IPoolManager.SwapParams calldata, BalanceDelta, bytes calldata)\\n        internal\\n        virtual\\n        returns (bytes4, int128)\\n    {\\n        revert HookNotImplemented();\\n    }\\n\\n    /// @inheritdoc IHooks\\n    function beforeDonate(\\n        address sender,\\n        PoolKey calldata key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external onlyPoolManager returns (bytes4) {\\n        return _beforeDonate(sender, key, amount0, amount1, hookData);\\n    }\\n\\n    function _beforeDonate(address, PoolKey calldata, uint256, uint256, bytes calldata)\\n        internal\\n        virtual\\n        returns (bytes4)\\n    {\\n        revert HookNotImplemented();\\n    }\\n\\n    /// @inheritdoc IHooks\\n    function afterDonate(\\n        address sender,\\n        PoolKey calldata key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external onlyPoolManager returns (bytes4) {\\n        return _afterDonate(sender, key, amount0, amount1, hookData);\\n    }\\n\\n    function _afterDonate(address, PoolKey calldata, uint256, uint256, bytes calldata)\\n        internal\\n        virtual\\n        returns (bytes4)\\n    {\\n        revert HookNotImplemented();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/base/DeltaResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Currency} from \\\"@uniswap/v4-core/src/types/Currency.sol\\\";\\nimport {TransientStateLibrary} from \\\"@uniswap/v4-core/src/libraries/TransientStateLibrary.sol\\\";\\nimport {IPoolManager} from \\\"@uniswap/v4-core/src/interfaces/IPoolManager.sol\\\";\\nimport {ImmutableState} from \\\"./ImmutableState.sol\\\";\\nimport {ActionConstants} from \\\"../libraries/ActionConstants.sol\\\";\\n\\n/// @notice Abstract contract used to sync, send, and settle funds to the pool manager\\n/// @dev Note that sync() is called before any erc-20 transfer in `settle`.\\nabstract contract DeltaResolver is ImmutableState {\\n    using TransientStateLibrary for IPoolManager;\\n\\n    /// @notice Emitted trying to settle a positive delta.\\n    error DeltaNotPositive(Currency currency);\\n    /// @notice Emitted trying to take a negative delta.\\n    error DeltaNotNegative(Currency currency);\\n    /// @notice Emitted when the contract does not have enough balance to wrap or unwrap.\\n    error InsufficientBalance();\\n\\n    /// @notice Take an amount of currency out of the PoolManager\\n    /// @param currency Currency to take\\n    /// @param recipient Address to receive the currency\\n    /// @param amount Amount to take\\n    /// @dev Returns early if the amount is 0\\n    function _take(Currency currency, address recipient, uint256 amount) internal {\\n        if (amount == 0) return;\\n        poolManager.take(currency, recipient, amount);\\n    }\\n\\n    /// @notice Pay and settle a currency to the PoolManager\\n    /// @dev The implementing contract must ensure that the `payer` is a secure address\\n    /// @param currency Currency to settle\\n    /// @param payer Address of the payer\\n    /// @param amount Amount to send\\n    /// @dev Returns early if the amount is 0\\n    function _settle(Currency currency, address payer, uint256 amount) internal {\\n        if (amount == 0) return;\\n\\n        poolManager.sync(currency);\\n        if (currency.isAddressZero()) {\\n            poolManager.settle{value: amount}();\\n        } else {\\n            _pay(currency, payer, amount);\\n            poolManager.settle();\\n        }\\n    }\\n\\n    /// @notice Abstract function for contracts to implement paying tokens to the poolManager\\n    /// @dev The recipient of the payment should be the poolManager\\n    /// @param token The token to settle. This is known not to be the native currency\\n    /// @param payer The address who should pay tokens\\n    /// @param amount The number of tokens to send\\n    function _pay(Currency token, address payer, uint256 amount) internal virtual;\\n\\n    /// @notice Obtain the full amount owed by this contract (negative delta)\\n    /// @param currency Currency to get the delta for\\n    /// @return amount The amount owed by this contract as a uint256\\n    function _getFullDebt(Currency currency) internal view returns (uint256 amount) {\\n        int256 _amount = poolManager.currencyDelta(address(this), currency);\\n        // If the amount is positive, it should be taken not settled.\\n        if (_amount > 0) revert DeltaNotNegative(currency);\\n        // Casting is safe due to limits on the total supply of a pool\\n        amount = uint256(-_amount);\\n    }\\n\\n    /// @notice Obtain the full credit owed to this contract (positive delta)\\n    /// @param currency Currency to get the delta for\\n    /// @return amount The amount owed to this contract as a uint256\\n    function _getFullCredit(Currency currency) internal view returns (uint256 amount) {\\n        int256 _amount = poolManager.currencyDelta(address(this), currency);\\n        // If the amount is negative, it should be settled not taken.\\n        if (_amount < 0) revert DeltaNotPositive(currency);\\n        amount = uint256(_amount);\\n    }\\n\\n    /// @notice Calculates the amount for a settle action\\n    function _mapSettleAmount(uint256 amount, Currency currency) internal view returns (uint256) {\\n        if (amount == ActionConstants.CONTRACT_BALANCE) {\\n            return currency.balanceOfSelf();\\n        } else if (amount == ActionConstants.OPEN_DELTA) {\\n            return _getFullDebt(currency);\\n        } else {\\n            return amount;\\n        }\\n    }\\n\\n    /// @notice Calculates the amount for a take action\\n    function _mapTakeAmount(uint256 amount, Currency currency) internal view returns (uint256) {\\n        if (amount == ActionConstants.OPEN_DELTA) {\\n            return _getFullCredit(currency);\\n        } else {\\n            return amount;\\n        }\\n    }\\n\\n    /// @notice Calculates the sanitized amount before wrapping/unwrapping.\\n    /// @param inputCurrency The currency, either native or wrapped native, that this contract holds\\n    /// @param amount The amount to wrap or unwrap. Can be CONTRACT_BALANCE, OPEN_DELTA or a specific amount\\n    /// @param outputCurrency The currency after the wrap/unwrap that the user may owe a balance in on the poolManager\\n    function _mapWrapUnwrapAmount(Currency inputCurrency, uint256 amount, Currency outputCurrency)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // if wrapping, the balance in this contract is in ETH\\n        // if unwrapping, the balance in this contract is in WETH\\n        uint256 balance = inputCurrency.balanceOf(address(this));\\n        if (amount == ActionConstants.CONTRACT_BALANCE) {\\n            // return early to avoid unnecessary balance check\\n            return balance;\\n        }\\n        if (amount == ActionConstants.OPEN_DELTA) {\\n            // if wrapping, the open currency on the PoolManager is WETH.\\n            // if unwrapping, the open currency on the PoolManager is ETH.\\n            // note that we use the DEBT amount. Positive deltas can be taken and then wrapped.\\n            amount = _getFullDebt(outputCurrency);\\n        }\\n        if (amount > balance) revert InsufficientBalance();\\n        return amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/libraries/LPFeeLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @notice Library of helper functions for a pools LP fee\\nlibrary LPFeeLibrary {\\n    using LPFeeLibrary for uint24;\\n    using CustomRevert for bytes4;\\n\\n    /// @notice Thrown when the static or dynamic fee on a pool exceeds 100%.\\n    error LPFeeTooLarge(uint24 fee);\\n\\n    /// @notice An lp fee of exactly 0b1000000... signals a dynamic fee pool. This isn't a valid static fee as it is > MAX_LP_FEE\\n    uint24 public constant DYNAMIC_FEE_FLAG = 0x800000;\\n\\n    /// @notice the second bit of the fee returned by beforeSwap is used to signal if the stored LP fee should be overridden in this swap\\n    // only dynamic-fee pools can return a fee via the beforeSwap hook\\n    uint24 public constant OVERRIDE_FEE_FLAG = 0x400000;\\n\\n    /// @notice mask to remove the override fee flag from a fee returned by the beforeSwaphook\\n    uint24 public constant REMOVE_OVERRIDE_MASK = 0xBFFFFF;\\n\\n    /// @notice the lp fee is represented in hundredths of a bip, so the max is 100%\\n    uint24 public constant MAX_LP_FEE = 1000000;\\n\\n    /// @notice returns true if a pool's LP fee signals that the pool has a dynamic fee\\n    /// @param self The fee to check\\n    /// @return bool True of the fee is dynamic\\n    function isDynamicFee(uint24 self) internal pure returns (bool) {\\n        return self == DYNAMIC_FEE_FLAG;\\n    }\\n\\n    /// @notice returns true if an LP fee is valid, aka not above the maximum permitted fee\\n    /// @param self The fee to check\\n    /// @return bool True of the fee is valid\\n    function isValid(uint24 self) internal pure returns (bool) {\\n        return self <= MAX_LP_FEE;\\n    }\\n\\n    /// @notice validates whether an LP fee is larger than the maximum, and reverts if invalid\\n    /// @param self The fee to validate\\n    function validate(uint24 self) internal pure {\\n        if (!self.isValid()) LPFeeTooLarge.selector.revertWith(self);\\n    }\\n\\n    /// @notice gets and validates the initial LP fee for a pool. Dynamic fee pools have an initial fee of 0.\\n    /// @dev if a dynamic fee pool wants a non-0 initial fee, it should call `updateDynamicLPFee` in the afterInitialize hook\\n    /// @param self The fee to get the initial LP from\\n    /// @return initialFee 0 if the fee is dynamic, otherwise the fee (if valid)\\n    function getInitialLPFee(uint24 self) internal pure returns (uint24) {\\n        // the initial fee for a dynamic fee pool is 0\\n        if (self.isDynamicFee()) return 0;\\n        self.validate();\\n        return self;\\n    }\\n\\n    /// @notice returns true if the fee has the override flag set (2nd highest bit of the uint24)\\n    /// @param self The fee to check\\n    /// @return bool True of the fee has the override flag set\\n    function isOverride(uint24 self) internal pure returns (bool) {\\n        return self & OVERRIDE_FEE_FLAG != 0;\\n    }\\n\\n    /// @notice returns a fee with the override flag removed\\n    /// @param self The fee to remove the override flag from\\n    /// @return fee The fee without the override flag set\\n    function removeOverrideFlag(uint24 self) internal pure returns (uint24) {\\n        return self & REMOVE_OVERRIDE_MASK;\\n    }\\n\\n    /// @notice Removes the override flag and validates the fee (reverts if the fee is too large)\\n    /// @param self The fee to remove the override flag from, and then validate\\n    /// @return fee The fee without the override flag set (if valid)\\n    function removeOverrideFlagAndValidate(uint24 self) internal pure returns (uint24 fee) {\\n        fee = self.removeOverrideFlag();\\n        fee.validate();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/libraries/ParseBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice Parses bytes returned from hooks and the byte selector used to check return selectors from hooks.\\n/// @dev parseSelector also is used to parse the expected selector\\n/// For parsing hook returns, note that all hooks return either bytes4 or (bytes4, 32-byte-delta) or (bytes4, 32-byte-delta, uint24).\\nlibrary ParseBytes {\\n    function parseSelector(bytes memory result) internal pure returns (bytes4 selector) {\\n        // equivalent: (selector,) = abi.decode(result, (bytes4, int256));\\n        assembly (\\\"memory-safe\\\") {\\n            selector := mload(add(result, 0x20))\\n        }\\n    }\\n\\n    function parseFee(bytes memory result) internal pure returns (uint24 lpFee) {\\n        // equivalent: (,, lpFee) = abi.decode(result, (bytes4, int256, uint24));\\n        assembly (\\\"memory-safe\\\") {\\n            lpFee := mload(add(result, 0x60))\\n        }\\n    }\\n\\n    function parseReturnDelta(bytes memory result) internal pure returns (int256 hookReturn) {\\n        // equivalent: (, hookReturnDelta) = abi.decode(result, (bytes4, int256));\\n        assembly (\\\"memory-safe\\\") {\\n            hookReturn := mload(add(result, 0x40))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/base/ImmutableState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IPoolManager} from \\\"@uniswap/v4-core/src/interfaces/IPoolManager.sol\\\";\\nimport {IImmutableState} from \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title Immutable State\\n/// @notice A collection of immutable state variables, commonly used across multiple contracts\\ncontract ImmutableState is IImmutableState {\\n    /// @inheritdoc IImmutableState\\n    IPoolManager public immutable poolManager;\\n\\n    /// @notice Thrown when the caller is not PoolManager\\n    error NotPoolManager();\\n\\n    /// @notice Only allow calls from the PoolManager contract\\n    modifier onlyPoolManager() {\\n        if (msg.sender != address(poolManager)) revert NotPoolManager();\\n        _;\\n    }\\n\\n    constructor(IPoolManager _poolManager) {\\n        poolManager = _poolManager;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/libraries/TransientStateLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IPoolManager} from \\\"../interfaces/IPoolManager.sol\\\";\\nimport {Currency} from \\\"../types/Currency.sol\\\";\\nimport {CurrencyReserves} from \\\"./CurrencyReserves.sol\\\";\\nimport {NonzeroDeltaCount} from \\\"./NonzeroDeltaCount.sol\\\";\\nimport {Lock} from \\\"./Lock.sol\\\";\\n\\n/// @notice A helper library to provide state getters that use exttload\\nlibrary TransientStateLibrary {\\n    /// @notice returns the reserves for the synced currency\\n    /// @param manager The pool manager contract.\\n\\n    /// @return uint256 The reserves of the currency.\\n    /// @dev returns 0 if the reserves are not synced or value is 0.\\n    /// Checks the synced currency to only return valid reserve values (after a sync and before a settle).\\n    function getSyncedReserves(IPoolManager manager) internal view returns (uint256) {\\n        if (getSyncedCurrency(manager).isAddressZero()) return 0;\\n        return uint256(manager.exttload(CurrencyReserves.RESERVES_OF_SLOT));\\n    }\\n\\n    function getSyncedCurrency(IPoolManager manager) internal view returns (Currency) {\\n        return Currency.wrap(address(uint160(uint256(manager.exttload(CurrencyReserves.CURRENCY_SLOT)))));\\n    }\\n\\n    /// @notice Returns the number of nonzero deltas open on the PoolManager that must be zeroed out before the contract is locked\\n    function getNonzeroDeltaCount(IPoolManager manager) internal view returns (uint256) {\\n        return uint256(manager.exttload(NonzeroDeltaCount.NONZERO_DELTA_COUNT_SLOT));\\n    }\\n\\n    /// @notice Get the current delta for a caller in the given currency\\n    /// @param target The credited account address\\n    /// @param currency The currency for which to lookup the delta\\n    function currencyDelta(IPoolManager manager, address target, Currency currency) internal view returns (int256) {\\n        bytes32 key;\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, and(target, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(32, and(currency, 0xffffffffffffffffffffffffffffffffffffffff))\\n            key := keccak256(0, 64)\\n        }\\n        return int256(uint256(manager.exttload(key)));\\n    }\\n\\n    /// @notice Returns whether the contract is unlocked or not\\n    function isUnlocked(IPoolManager manager) internal view returns (bool) {\\n        return manager.exttload(Lock.IS_UNLOCKED_SLOT) != 0x0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/ActionConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Action Constants\\n/// @notice Common constants used in actions\\n/// @dev Constants are gas efficient alternatives to their literal values\\nlibrary ActionConstants {\\n    /// @notice used to signal that an action should use the input value of the open delta on the pool manager\\n    /// or of the balance that the contract holds\\n    uint128 internal constant OPEN_DELTA = 0;\\n    /// @notice used to signal that an action should use the contract's entire balance of a currency\\n    /// This value is equivalent to 1<<255, i.e. a singular 1 in the most significant bit.\\n    uint256 internal constant CONTRACT_BALANCE = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice used to signal that the recipient of an action should be the msgSender\\n    address internal constant MSG_SENDER = address(1);\\n\\n    /// @notice used to signal that the recipient of an action should be the address(this)\\n    address internal constant ADDRESS_THIS = address(2);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IImmutableState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IPoolManager} from \\\"@uniswap/v4-core/src/interfaces/IPoolManager.sol\\\";\\n\\n/// @title IImmutableState\\n/// @notice Interface for the ImmutableState contract\\ninterface IImmutableState {\\n    /// @notice The Uniswap v4 PoolManager contract\\n    function poolManager() external view returns (IPoolManager);\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/libraries/CurrencyReserves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.24;\\n\\nimport {Currency} from \\\"../types/Currency.sol\\\";\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\nlibrary CurrencyReserves {\\n    using CustomRevert for bytes4;\\n\\n    /// bytes32(uint256(keccak256(\\\"ReservesOf\\\")) - 1)\\n    bytes32 constant RESERVES_OF_SLOT = 0x1e0745a7db1623981f0b2a5d4232364c00787266eb75ad546f190e6cebe9bd95;\\n    /// bytes32(uint256(keccak256(\\\"Currency\\\")) - 1)\\n    bytes32 constant CURRENCY_SLOT = 0x27e098c505d44ec3574004bca052aabf76bd35004c182099d8c575fb238593b9;\\n\\n    function getSyncedCurrency() internal view returns (Currency currency) {\\n        assembly (\\\"memory-safe\\\") {\\n            currency := tload(CURRENCY_SLOT)\\n        }\\n    }\\n\\n    function resetCurrency() internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(CURRENCY_SLOT, 0)\\n        }\\n    }\\n\\n    function syncCurrencyAndReserves(Currency currency, uint256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(CURRENCY_SLOT, and(currency, 0xffffffffffffffffffffffffffffffffffffffff))\\n            tstore(RESERVES_OF_SLOT, value)\\n        }\\n    }\\n\\n    function getSyncedReserves() internal view returns (uint256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(RESERVES_OF_SLOT)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/libraries/NonzeroDeltaCount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.24;\\n\\n/// @notice This is a temporary library that allows us to use transient storage (tstore/tload)\\n/// for the nonzero delta count.\\n/// TODO: This library can be deleted when we have the transient keyword support in solidity.\\nlibrary NonzeroDeltaCount {\\n    // The slot holding the number of nonzero deltas. bytes32(uint256(keccak256(\\\"NonzeroDeltaCount\\\")) - 1)\\n    bytes32 internal constant NONZERO_DELTA_COUNT_SLOT =\\n        0x7d4b3164c6e45b97e7d87b7125a44c5828d005af88f9d751cfd78729c5d99a0b;\\n\\n    function read() internal view returns (uint256 count) {\\n        assembly (\\\"memory-safe\\\") {\\n            count := tload(NONZERO_DELTA_COUNT_SLOT)\\n        }\\n    }\\n\\n    function increment() internal {\\n        assembly (\\\"memory-safe\\\") {\\n            let count := tload(NONZERO_DELTA_COUNT_SLOT)\\n            count := add(count, 1)\\n            tstore(NONZERO_DELTA_COUNT_SLOT, count)\\n        }\\n    }\\n\\n    /// @notice Potential to underflow. Ensure checks are performed by integrating contracts to ensure this does not happen.\\n    /// Current usage ensures this will not happen because we call decrement with known boundaries (only up to the number of times we call increment).\\n    function decrement() internal {\\n        assembly (\\\"memory-safe\\\") {\\n            let count := tload(NONZERO_DELTA_COUNT_SLOT)\\n            count := sub(count, 1)\\n            tstore(NONZERO_DELTA_COUNT_SLOT, count)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v4-core/src/libraries/Lock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.24;\\n\\n/// @notice This is a temporary library that allows us to use transient storage (tstore/tload)\\n/// TODO: This library can be deleted when we have the transient keyword support in solidity.\\nlibrary Lock {\\n    // The slot holding the unlocked state, transiently. bytes32(uint256(keccak256(\\\"Unlocked\\\")) - 1)\\n    bytes32 internal constant IS_UNLOCKED_SLOT = 0xc090fc4683624cfc3884e9d8de5eca132f2d0ec062aff75d43c0465d5ceeab23;\\n\\n    function unlock() internal {\\n        assembly (\\\"memory-safe\\\") {\\n            // unlock\\n            tstore(IS_UNLOCKED_SLOT, true)\\n        }\\n    }\\n\\n    function lock() internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(IS_UNLOCKED_SLOT, false)\\n        }\\n    }\\n\\n    function isUnlocked() internal view returns (bool unlocked) {\\n        assembly (\\\"memory-safe\\\") {\\n            unlocked := tload(IS_UNLOCKED_SLOT)\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@uniswap/v4-core/=lib/v4-core/\",\r\n      \"ds-test/=lib/v4-core/lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/v4-core/lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/v4-core/lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/v4-core/lib/solmate/\",\r\n      \"@ensdomains/=lib/v4-core/node_modules/@ensdomains/\",\r\n      \"@openzeppelin/=lib/v4-core/lib/openzeppelin-contracts/\",\r\n      \"erc4626-tests/=lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\r\n      \"hardhat/=lib/v4-core/node_modules/hardhat/\",\r\n      \"permit2/=lib/permit2/\",\r\n      \"v4-core/=lib/v4-core/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 44444444\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"cancun\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IFewWrappedToken\",\"name\":\"_fwWETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"DeltaNotNegative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"DeltaNotPositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HookNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPoolManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPoolManager.ModifyLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"BalanceDelta\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"BalanceDelta\",\"name\":\"feesAccrued\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"afterAddLiquidity\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"afterDonate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"afterInitialize\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPoolManager.ModifyLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"BalanceDelta\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"BalanceDelta\",\"name\":\"feesAccrued\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"afterRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IPoolManager.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"BalanceDelta\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"afterSwap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPoolManager.ModifyLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"beforeAddLiquidity\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"beforeDonate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"beforeInitialize\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPoolManager.ModifyLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"beforeRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IPoolManager.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"beforeSwap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"BeforeSwapDelta\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fwWETH\",\"outputs\":[{\"internalType\":\"contract IFewWrappedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHookPermissions\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"beforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeDonate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterDonate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeSwapReturnDelta\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterSwapReturnDelta\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterAddLiquidityReturnDelta\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterRemoveLiquidityReturnDelta\",\"type\":\"bool\"}],\"internalType\":\"struct Hooks.Permissions\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingCurrency\",\"outputs\":[{\"internalType\":\"Currency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract WETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapZeroForOne\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperCurrency\",\"outputs\":[{\"internalType\":\"Currency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "FewETHHook",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "CompilerType": "solc-j",
      "OptimizationUsed": "1",
      "Runs": "44444444",
      "ConstructorArguments": "000000000000000000000000000000000004444c5dc75cb358380d2e3de08a90000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a250cc729bb3323e7933022a67b52200fe354767",
      "EVMVersion": "cancun",
      "Library": "",
      "LicenseType": "",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "",
      "SimilarMatch": ""
    }
  ]
}